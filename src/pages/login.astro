---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Login Admin - Grupo Leones">
  <main class="min-h-screen bg-gradient-to-br from-red-600 via-red-500 to-red-700 flex items-center justify-center p-4">
    <!-- Back to Home Button -->
    <a 
      href="/" 
      class="fixed top-6 left-6 z-50 bg-white/20 hover:bg-white/30 text-white p-3 rounded-full backdrop-blur-sm border border-white/30 transition-all duration-300 hover:scale-110"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
      </svg>
    </a>

    <div class="w-full max-w-md">
      <!-- Login Card -->
      <div class="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl border border-white/20 p-6 md:p-8">
        <!-- Logo -->
        <div class="text-center mb-6 md:mb-8">
          <div class="inline-block p-3 md:p-4 bg-white/20 rounded-full mb-4">
            <svg class="w-12 h-12 md:w-16 md:h-16 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <h1 class="text-2xl md:text-3xl font-bold text-white mb-2">Panel de Administración</h1>
          <p class="text-white/80 text-sm md:text-base">Acceso seguro con código OTP</p>
        </div>

        <!-- Step 1: Request OTP -->
        <div id="requestOTPStep" class="space-y-4 md:space-y-6">
          <div class="text-center mb-6">
            <div class="inline-block p-3 bg-white/20 rounded-full mb-3">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
            </div>
            <p class="text-white/90 text-sm">
              Se enviará un código de verificación al email del administrador
            </p>
          </div>

          <button
            type="button"
            id="requestOTPBtn"
            class="w-full bg-white text-red-600 py-3 px-4 rounded-xl font-semibold hover:bg-white/90 focus:outline-none focus:ring-2 focus:ring-white/50 transform transition-all duration-300 hover:scale-105 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span id="requestOTPText">Solicitar Código de Acceso</span>
          </button>
        </div>

        <!-- Step 2: Enter OTP -->
        <div id="enterOTPStep" class="hidden space-y-4 md:space-y-6">
          <div class="text-center mb-6">
            <div class="inline-block p-3 bg-green-500/20 rounded-full mb-3">
              <svg class="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
            </div>
            <p class="text-white/90 text-sm">
              Código enviado exitosamente. Revisa tu email.
            </p>
            <p class="text-white/70 text-xs mt-2">
              El código expira en <span id="countdown">5:00</span>
            </p>
          </div>

          <form id="otpForm" class="space-y-4">
            <!-- OTP Input -->
            <div class="relative">
              <label for="otpCode" class="block text-sm font-medium text-white/90 mb-2">
                Código de Verificación (6 dígitos)
              </label>
              <div class="relative">
                <input
                  type="text"
                  id="otpCode"
                  name="otpCode"
                  maxlength="6"
                  pattern="[0-9]{6}"
                  required
                  class="w-full px-4 py-3 pl-12 bg-white/20 border border-white/30 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/50 focus:border-transparent transition-all duration-300 text-center text-2xl font-mono tracking-widest"
                  placeholder="000000"
                />
                <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
                </svg>
              </div>
            </div>

            <!-- Submit Button -->
            <button
              type="submit"
              id="verifyOTPBtn"
              class="w-full bg-white text-red-600 py-3 px-4 rounded-xl font-semibold hover:bg-white/90 focus:outline-none focus:ring-2 focus:ring-white/50 transform transition-all duration-300 hover:scale-105 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span id="verifyOTPText">Verificar Código</span>
            </button>

            <!-- Resend Button -->
            <button
              type="button"
              id="resendOTPBtn"
              class="w-full bg-transparent border border-white/30 text-white py-2 px-4 rounded-xl font-medium hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-white/50 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Reenviar Código
            </button>
          </form>
        </div>

        <!-- Error Messages -->
        <div id="errorMessage" class="hidden mt-4 p-4 bg-red-500/20 border border-red-500/30 rounded-xl">
          <div class="flex items-center gap-2 text-red-300 text-sm">
            <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.054 0 1.658-1.14 1.105-2.05L13.105 4.05c-.525-.91-1.685-.91-2.21 0L3.977 16.95C3.424 17.86 4.028 19 5.082 19z"/>
            </svg>
            <span id="errorText"></span>
          </div>
        </div>

        <!-- Info Box -->
        <div class="mt-6 p-4 bg-white/5 rounded-xl border border-white/20">
          <p class="text-white/70 text-xs md:text-sm text-center">
            El código expirará en 5 minutos.
          </p>
        </div>
      </div>
    </div>
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Elementos del DOM
      const requestOTPStep = document.getElementById('requestOTPStep');
      const enterOTPStep = document.getElementById('enterOTPStep');
      const requestOTPBtn = document.getElementById('requestOTPBtn');
      const requestOTPText = document.getElementById('requestOTPText');
      const otpForm = document.getElementById('otpForm');
      const otpCodeInput = document.getElementById('otpCode') as HTMLInputElement;
      const verifyOTPBtn = document.getElementById('verifyOTPBtn');
      const verifyOTPText = document.getElementById('verifyOTPText');
      const resendOTPBtn = document.getElementById('resendOTPBtn');
      const errorMessage = document.getElementById('errorMessage');
      const errorText = document.getElementById('errorText');
      const countdown = document.getElementById('countdown');

      // Variables de estado
      let sessionId: string | null = null;
      let countdownInterval: ReturnType<typeof setInterval> | null = null;

      function showError(message: string) {
        if (errorText && errorMessage) {
          errorText.textContent = message;
          errorMessage.classList.remove('hidden');
        }
      }

      function hideError() {
        if (errorMessage) {
          errorMessage.classList.add('hidden');
        }
      }

      // Función para iniciar countdown
      function startCountdown(seconds: number) {
        let timeLeft = seconds;
        
        if (countdownInterval) {
          clearInterval(countdownInterval);
        }

        countdownInterval = setInterval(() => {
          const minutes = Math.floor(timeLeft / 60);
          const secs = timeLeft % 60;
          
          if (countdown) {
            countdown.textContent = `${minutes}:${secs.toString().padStart(2, '0')}`;
          }

          if (timeLeft <= 0) {
            clearInterval(countdownInterval!);
            showError('El código ha expirado. Solicita uno nuevo.');
            // Volver al paso 1
            if (requestOTPStep && enterOTPStep) {
              requestOTPStep.classList.remove('hidden');
              enterOTPStep.classList.add('hidden');
            }
          }

          timeLeft--;
        }, 1000);
      }

      // Manejar solicitud de OTP
      requestOTPBtn?.addEventListener('click', async () => {
        hideError();
        
        if (requestOTPBtn instanceof HTMLButtonElement && requestOTPText) {
          requestOTPBtn.disabled = true;
          requestOTPText.textContent = 'Enviando código...';
        }

        try {
          const response = await fetch('/api/generateOTP', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          const result = await response.json();

          if (result.success) {
            sessionId = result.sessionId;
            
            if (requestOTPStep && enterOTPStep) {
              requestOTPStep.classList.add('hidden');
              enterOTPStep.classList.remove('hidden');
            }

            startCountdown(result.expiresIn);

            if (otpCodeInput) {
              otpCodeInput.focus();
            }
          } else {
            showError(result.message || 'Error al enviar el código');
          }
        } catch (error) {
          console.error('Error:', error);
          showError('Error de conexión. Inténtalo de nuevo.');
        } finally {
          if (requestOTPBtn instanceof HTMLButtonElement && requestOTPText) {
            requestOTPBtn.disabled = false;
            requestOTPText.textContent = 'Solicitar Código de Acceso';
          }
        }
      });

      // Manejar verificación de OTP
      otpForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        hideError();

        if (!sessionId) {
          showError('Sesión no válida. Solicita un nuevo código.');
          return;
        }

        const otpCode = otpCodeInput?.value.trim();

        if (!otpCode || otpCode.length !== 6) {
          showError('Ingresa un código de 6 dígitos');
          return;
        }

        if (verifyOTPBtn instanceof HTMLButtonElement && verifyOTPText) {
          verifyOTPBtn.disabled = true;
          verifyOTPText.textContent = 'Verificando...';
        }

        try {
          const response = await fetch('/api/verifyOTP', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              sessionId: sessionId,
              otpCode: otpCode
            })
          });

          const result = await response.json();

          if (result.success) {

            localStorage.setItem('adminToken', result.adminToken);
            localStorage.setItem('adminTokenExpires', (Date.now() + result.expiresIn * 1000).toString());
            
            if (countdownInterval) {
              clearInterval(countdownInterval);
            }

            if (verifyOTPText) {
              verifyOTPText.textContent = '¡Acceso autorizado!';
            }

            setTimeout(() => {
              window.location.href = '/formEmail';
            }, 1000);
          } else {
            showError(result.message || 'Código incorrecto');
          }
        } catch (error) {
          console.error('Error:', error);
          showError('Error de conexión. Inténtalo de nuevo.');
        } finally {
          if (verifyOTPBtn instanceof HTMLButtonElement && verifyOTPText) {
            verifyOTPBtn.disabled = false;
            verifyOTPText.textContent = 'Verificar Código';
          }
        }
      });

      // Manejar reenvío de OTP
      resendOTPBtn?.addEventListener('click', () => {
        // Limpiar countdown
        if (countdownInterval) {
          clearInterval(countdownInterval);
        }

        // Volver al paso 1
        if (requestOTPStep && enterOTPStep) {
          requestOTPStep.classList.remove('hidden');
          enterOTPStep.classList.add('hidden');
        }

        // Limpiar input
        if (otpCodeInput) {
          otpCodeInput.value = '';
        }

        hideError();
      });

      otpCodeInput?.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        target.value = target.value.replace(/[^0-9]/g, '');
      });


      // Auto-submit cuando se completen 6 dígitos
      otpCodeInput?.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        if (target.value.length === 6) {

          setTimeout(() => {
            otpForm?.dispatchEvent(new Event('submit'));
          }, 100);
        }
      });
    });
  </script>
</Layout>
