---
import { Image } from 'astro:assets';

const { 
  id = '', 
  title = '', 
  subtitle = '', 
  image = { src: '/placeholder.svg', alt: 'Avatar' }, 
  terms = '' 
} = Astro.props;
---

<div
  id="subscriptionModal"
  class="fixed top-0 left-0 z-[999] flex h-full w-full items-center justify-center bg-black/20 backdrop-blur-sm opacity-0 pointer-events-none transition-opacity duration-300"
>
  <div
    class="relative flex w-full max-w-2xl flex-col rounded-xl bg-white p-8 shadow-xl transition-transform duration-300"
  >
    <button
      class="absolute top-4 right-4 rounded-full p-1 text-gray-500 transition-colors hover:bg-gray-100 hover:text-gray-700"
      id="closeModalBtn"
    >
      <!-- X Icon usando SVG inline -->
      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
      <span class="sr-only">Close Modal</span>
    </button>

    <div id="modalContent">
      <div class="flex flex-col items-center gap-4">
        <div class="relative h-24 w-24">
          <Image
            src={image.src || "/placeholder.svg"}
            alt={image.alt}
            class="rounded-full object-cover"
            width={96}
            height={96}
          />
        </div>
        <h3 class="text-2xl font-bold">{title}</h3>
        <p class="text-center text-gray-500">{subtitle}</p>
      </div>

      <form id="subscriptionForm" class="mt-8 flex flex-col gap-4">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700"
            >Email</label
          >
          <input
            type="email"
            id="email"
            class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500 sm:text-sm"
            placeholder="you@example.com"
            required
          />
        </div>

        <div>
          <label for="name" class="block text-sm font-medium text-gray-700"
            >Name</label
          >
          <input
            type="text"
            id="name"
            class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500 sm:text-sm"
            placeholder="Your Name"
            required
          />
        </div>

        <div class="flex items-center">
          <input
            type="checkbox"
            id="terms"
            class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
            required
          />
          <label for="terms" class="ml-2 block text-sm text-gray-900"
            >{terms}</label
          >
        </div>

        <div>
          <button
            type="submit"
            class="flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            id="subscribeBtn"
          >
            Subscribe
          </button>
        </div>
      </form>
    </div>

    <div
      id="successMessage"
      class="hidden flex flex-col items-center gap-4 text-center"
    >
      <!-- Check Icon usando SVG inline -->
      <svg class="h-12 w-12 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
      </svg>
      <h4 class="text-xl font-bold">Thank you!</h4>
      <p class="text-gray-500">
        You have successfully subscribed to our newsletter.
      </p>
    </div>
  </div>
</div>

<script>
  // Agregar declaraci√≥n de tipos para propiedades personalizadas de window
  declare global {
    interface Window {
      resetSubscription: () => void;
      checkSubscriptionStatus: () => void;
    }
  }

  // Funci√≥n global para resetear la suscripci√≥n (disponible en consola)
  window.resetSubscription = function() {
    localStorage.removeItem('userSubscribed');
    localStorage.removeItem('modalLastClosed');
    console.log('‚úÖ Suscripci√≥n reseteada. Recarga la p√°gina para ver el modal.');
    console.log('üìä Estado actual:');
    console.log('- userSubscribed:', localStorage.getItem('userSubscribed'));
    console.log('- modalLastClosed:', localStorage.getItem('modalLastClosed'));
  };

  // Funci√≥n global para verificar el estado actual
  window.checkSubscriptionStatus = function() {
    const hasSubscribed = localStorage.getItem('userSubscribed');
    const lastClosedTime = localStorage.getItem('modalLastClosed');
    const fourHours = 4 * 60 * 60 * 1000; // 4 horas en milisegundos
    
    console.log('üìä Estado de suscripci√≥n:');
    console.log('- Usuario suscrito:', hasSubscribed === 'true' ? 'S√≠' : 'No');
    console.log('- √öltima vez cerrado:', lastClosedTime ? new Date(parseInt(lastClosedTime)).toLocaleString() : 'Nunca');
    
    if (lastClosedTime) {
      const timeDifference = Date.now() - parseInt(lastClosedTime);
      console.log('‚è∞ Tiempo transcurrido:', (timeDifference / (1000 * 60 * 60)).toFixed(2) + ' horas');
      
      if (timeDifference < fourHours) {
        console.log('‚ùå Modal no se muestra: No han pasado 4 horas');
        return;
      }
    }
    
    console.log('‚úÖ Mostrando modal de suscripci√≥n');

    const modalElement = document.getElementById("subscriptionModal");
    if (modalElement) {
      modalElement.classList.add('active');
    }
    
    function closeModal() {
      const modal = document.getElementById("subscriptionModal");
      if (modal) {
        modal.classList.add('opacity-0');
        setTimeout(() => {
          if (modal) {
            modal.style.display = 'none';
          }
        }, 300);
      }
      
      if (!localStorage.getItem('userSubscribed')) {
        localStorage.setItem('modalLastClosed', Date.now().toString());
        console.log('üíæ Guardado timestamp de cierre:', new Date().toLocaleString());
      }
    }
    
    function showSuccessMessage() {
      const modalContent = document.getElementById('modalContent');
      const subscriptionForm = document.getElementById('subscriptionForm');
      const successMessage = document.getElementById('successMessage');
      
      if (modalContent) modalContent.style.display = 'none';
      if (subscriptionForm) subscriptionForm.style.display = 'none';
      if (successMessage) successMessage.classList.remove('hidden');
      
      setTimeout(() => {
        closeModal();
      }, 2000);
    }
    
    const closeButton = document.getElementById('closeModalBtn');
    if (closeButton) {
      closeButton.addEventListener('click', (e) => {
        e.preventDefault();
        console.log('üö´ Modal cerrado por el usuario (bot√≥n X)');
        closeModal();
      });
    }
    
    const modalElement2 = document.getElementById("subscriptionModal");
    if (modalElement2) {
      modalElement2.addEventListener('click', (e) => {
        if (e.target === modalElement2) {
          console.log('üö´ Modal cerrado por el usuario (clic fuera)');
          closeModal();
        }
      });
    }
    
    const form = document.getElementById('subscriptionForm');
    if (form) {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        const emailInput = document.getElementById('email') as HTMLInputElement | null;
        const email = emailInput ? emailInput.value : '';
        
        console.log('üìß Email para suscripci√≥n:', email);
        
        localStorage.setItem('userSubscribed', 'true');
        localStorage.removeItem('modalLastClosed');
        console.log('‚úÖ Usuario suscrito exitosamente');
        
        showSuccessMessage();
      });
    }
  }
</script>

<style>
  #subscriptionModal {
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  #subscriptionModal.active {
    opacity: 1;
    visibility: visible;
  }
  
  #successMessage {
    animation: fadeInScale 0.5s ease-out;
  }
  
  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>