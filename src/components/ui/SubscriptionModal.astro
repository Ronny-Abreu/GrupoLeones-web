---
import { Icon } from 'astro-icon';
import { Image } from 'astro:assets';
import confetti from 'canvas-confetti';

interface Props {
  id: string;
  title: string;
  subtitle: string;
  image: {
    src: ImageMetadata;
    alt: string;
  };
  terms: string;
}

const { id, title, subtitle, image, terms } = Astro.props;
---

<div
  id={id}
  class="fixed top-0 left-0 z-[999] flex h-full w-full items-center justify-center bg-black/20 backdrop-blur-sm opacity-0 pointer-events-none transition-opacity duration-300"
>
  <div
    class="relative flex w-full max-w-2xl flex-col rounded-xl bg-white p-8 shadow-xl transition-transform duration-300"
  >
    <button
      class="absolute top-4 right-4 rounded-full p-1 text-gray-500 transition-colors hover:bg-gray-100 hover:text-gray-700"
      id="closeModalBtn"
    >
      <Icon name="radix-icons:cross-2" class="h-5 w-5" />
      <span class="sr-only">Close Modal</span>
    </button>

    <div id="modalContent">
      <div class="flex flex-col items-center gap-4">
        <div class="relative h-24 w-24">
          <Image
            src={image.src || "/placeholder.svg"}
            alt={image.alt}
            class="rounded-full object-cover"
            width={96}
            height={96}
          />
        </div>
        <h3 class="text-2xl font-bold">{title}</h3>
        <p class="text-center text-gray-500">{subtitle}</p>
      </div>

      <form id="subscriptionForm" class="mt-8 flex flex-col gap-4">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700"
            >Email</label
          >
          <input
            type="email"
            id="email"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            placeholder="you@example.com"
            required
          />
        </div>

        <div>
          <label for="name" class="block text-sm font-medium text-gray-700"
            >Name</label
          >
          <input
            type="text"
            id="name"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            placeholder="Your Name"
            required
          />
        </div>

        <div class="flex items-center">
          <input
            type="checkbox"
            id="terms"
            class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
            required
          />
          <label for="terms" class="ml-2 block text-sm text-gray-900"
            >{terms}</label
          >
        </div>

        <div>
          <button
            type="submit"
            class="flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            id="subscribeBtn"
          >
            Subscribe
          </button>
        </div>
      </form>
    </div>

    <div
      id="successMessage"
      class="hidden flex flex-col items-center gap-4 text-center"
    >
      <Icon name="radix-icons:check" class="h-12 w-12 text-green-500" />
      <h4 class="text-xl font-bold">Thank you!</h4>
      <p class="text-gray-500">
        You have successfully subscribed to our newsletter.
      </p>
    </div>
  </div>
</div>

<script>
  let modal = document.getElementById('subscriptionModal');
  let closeModalBtn = document.getElementById('closeModalBtn');
  let subscribeBtn = document.getElementById('subscribeBtn');
  let subscriptionForm = document.getElementById('subscriptionForm');
  let successMessage = document.getElementById('successMessage');
  let modalContent = document.getElementById('modalContent');

  function checkModalDisplay() {
    const modalLastClosed = localStorage.getItem('modalLastClosed');
    const userSubscribed = localStorage.getItem('userSubscribed');

    if (userSubscribed) {
      return;
    }

    if (modalLastClosed) {
      const timeSinceLastClosed = Date.now() - parseInt(modalLastClosed);
      const fourDays = 4 * 24 * 60 * 60 * 1000; // 4 days in milliseconds

      if (timeSinceLastClosed > fourDays) {
        showModal();
      } else {
        console.log('⏳ Modal no mostrado: Espera 4 días.');
      }
    } else {
      showModal();
    }
  }

  function showModal() {
    if (modal) {
      modal.classList.remove('opacity-0', 'pointer-events-none');
    }
  }

  function hideModal() {
    if (modal) {
      modal.classList.add('opacity-0');
      setTimeout(() => {
        if (modal) {
          modal.style.display = 'none';
        }
      }, 300);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    checkModalDisplay();

    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', closeModal);
    }

    if (subscribeBtn) {
      subscribeBtn.addEventListener('click', function (event) {
        event.preventDefault();
        subscribe();
      });
    }
  });

  function subscribe() {
    // Simulate successful subscription
    localStorage.setItem('userSubscribed', 'true');
    console.log('✅ Subscripción exitosa.');

    // Confetti effect
    fireConfetti();

    // Show success message
    showSuccessMessage();
  }

  function fireConfetti() {
    confetti({
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 },
    });
  }

  function closeModal() {
    if (modal) {
      modal.classList.add('opacity-0');
      setTimeout(() => {
        if (modal) {
          modal.style.display = 'none';
        }
      }, 300);
    }
    
    if (!localStorage.getItem('userSubscribed')) {
      localStorage.setItem('modalLastClosed', Date.now().toString());
      console.log('💾 Guardado timestamp de cierre:', new Date().toLocaleString());
    }
  }

  function showSuccessMessage() {
    if (modalContent) modalContent.style.display = 'none';
    if (subscriptionForm) subscriptionForm.style.display = 'none';
    if (successMessage) successMessage.classList.remove('hidden');
    
    setTimeout(() => {
      closeModal();
    }, 2000);
  }

  if (modal) {
    modal.addEventListener('click', (event) => {
      if (event.target === modal) {
        hideModal();
      }
    });
  }

  window.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      hideModal();
    }
  });

function confetti(arg0: { particleCount: number; spread: number; origin: { y: number; }; }) {
throw new Error("Function not implemented.");
}
</script>
