---
const { 
  id = '', 
  title = 'Suscríbete a nuestro boletín', 
  subtitle = 'Mantente al día con las últimas noticias y actualizaciones', 
  terms = 'Acepto los términos y condiciones' 
} = Astro.props;
---

<div
  id="subscriptionModal"
  class="fixed top-0 left-0 z-[999] flex h-full w-full items-center justify-center bg-black/40 backdrop-blur-sm opacity-0 pointer-events-none transition-all duration-500"
>
  <div
    class="relative flex w-full max-w-md flex-col rounded-2xl bg-gray-900/95 backdrop-blur-md p-8 shadow-2xl transition-all duration-500 transform scale-95 border border-gray-700/50"
  >
    <button
      class="absolute top-4 right-4 rounded-full p-2 text-gray-400 transition-all duration-300 hover:bg-gray-800/50 hover:text-white hover:rotate-90"
      id="closeModalBtn"
    >
      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
      <span class="sr-only">Cerrar Modal</span>
    </button>

    <div id="modalContent">
      <div class="flex flex-col items-center gap-6 mb-8">
        <div class="w-16 h-16 bg-gradient-to-br from-red-600 to-red-800 rounded-full flex items-center justify-center shadow-lg">
          <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
        </div>
        <div class="text-center">
          <h4 class="text-2xl font-bold text-white mb-2">{title}</h4>
          <p class="text-gray-300 text-sm leading-relaxed">{subtitle}</p>
        </div>
      </div>

      <form id="subscriptionForm" class="flex flex-col gap-6">
        <div class="relative">
          <input
            type="email"
            id="email"
            class="w-full bg-gray-800/50 border border-gray-600/50 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-red-500/50 focus:border-red-500/50 transition-all duration-300 backdrop-blur-sm"
            placeholder="tu@ejemplo.com"
            required
            style="color: #fff !important;"
          />
          <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-red-600/10 to-red-800/10 opacity-0 transition-opacity duration-300 pointer-events-none" id="inputGlow"></div>
        </div>

        <!-- Error message for email -->
        <div id="emailError" class="hidden text-red-400 text-sm items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.054 0 1.658-1.14 1.105-2.05L13.105 4.05c-.525-.91-1.685-.91-2.21 0L3.977 16.95C3.424 17.86 4.028 19 5.082 19z"/>
          </svg>
          <span id="emailErrorText"></span>
        </div>

        <div class="flex items-center gap-3">
          <input
            type="checkbox"
            id="terms"
            class="w-4 h-4 rounded border-gray-600 bg-gray-800/50 text-red-600 focus:ring-red-500/50 focus:ring-2"
            required
          />
          <label for="terms" class="text-sm text-gray-300 leading-relaxed">
            <span id="termsText" class="cursor-pointer transition-all duration-300 hover:font-bold">
              {terms}
            </span>
          </label>
        </div>

        <!-- Error message for terms -->
        <div id="termsError" class="hidden text-red-400 text-sm items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.054 0 1.658-1.14 1.105-2.05L13.105 4.05c-.525-.91-1.685-.91-2.21 0L3.977 16.95C3.424 17.86 4.028 19 5.082 19z"/>
          </svg>
          <span>Debes aceptar los términos y condiciones</span>
        </div>

        <button
          type="submit"
          class="relative w-full bg-black border border-gray-700 rounded-xl py-3 px-6 text-white font-semibold transition-all duration-300 hover:border-red-600/50 group overflow-hidden disabled:opacity-50 disabled:cursor-not-allowed"
          id="subscribeBtn"
        >
          <div class="absolute inset-0 bg-gradient-to-r from-red-900/0 via-red-800/0 to-red-900/0 group-hover:from-red-900/20 group-hover:via-red-800/30 group-hover:to-red-900/20 transition-all duration-500"></div>
          <div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500">
            <div class="absolute inset-0 bg-red-800/10 blur-xl"></div>
          </div>
          <span class="relative z-10" id="subscribeText">Suscribirse</span>
        </button>

        <!-- Mensaje de error general debajo del botón -->
        <div id="generalError" class="hidden bg-red-500/10 border border-red-500/30 rounded-lg p-3 text-red-400 text-sm items-center gap-2">
          <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.054 0 1.658-1.14 1.105-2.05L13.105 4.05c-.525-.91-1.685-.91-2.21 0L3.977 16.95C3.424 17.86 4.028 19 5.082 19z"/>
          </svg>
          <span id="generalErrorText"></span>
        </div>
      </form>
    </div>

    <div
      id="successMessage"
      class="hidden flex-col items-center gap-6 text-center"
    >
      <div class="w-20 h-20 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center shadow-lg animate-pulse">
        <svg class="h-10 w-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7" />
        </svg>
      </div>
      <div>
        <h4 class="text-2xl font-bold text-white mb-3">¡Perfecto!</h4>
        <p class="text-gray-300 leading-relaxed">
          Te has suscrito exitosamente a nuestro boletín.<br>
          <span class="text-green-400 text-sm">Revisa tu correo para la confirmación</span>
        </p>
      </div>
    </div>
  </div>
</div>

<!-- Modal de Términos y Condiciones -->
<div
  id="termsModal"
  class="fixed top-0 left-0 z-[1000] flex h-full w-full items-center justify-center bg-black/40 backdrop-blur-sm opacity-0 pointer-events-none transition-all duration-500 p-4"
>
  <div
    id="termsModalContent"
    class="relative w-full max-w-lg bg-gray-900/95 backdrop-blur-md rounded-2xl shadow-2xl transition-all duration-500 transform scale-95 border border-gray-700/50 flex flex-col"
  >
    <button
      class="absolute top-4 right-4 rounded-full p-2 text-gray-400 transition-all duration-300 hover:bg-gray-800/50 hover:text-white hover:rotate-90 z-10"
      id="closeTermsModalBtn"
    >
      <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
      <span class="sr-only">Cerrar Modal</span>
    </button>

    <!-- Header fijo -->
    <div class="text-center p-8 pb-4">
      <h3 class="text-2xl font-bold text-white mb-2">Términos y Condiciones</h3>
      <div class="w-16 h-1 bg-red-600 mx-auto rounded-full"></div>
    </div>

    <!-- Contenido con scroll -->
    <div class="px-8 overflow-y-auto hide-scrollbar" style="max-height: calc(70vh - 180px);">
      <div class="text-gray-300 text-sm space-y-4 pb-4">
        <p>
          Al suscribirte a nuestro boletín, aceptas los siguientes términos y condiciones:
        </p>
        
        <h4 class="text-white font-semibold text-lg">1. Uso de la información</h4>
        <p>
          La información proporcionada será utilizada exclusivamente para enviar noticias, actualizaciones y contenido relacionado con nuestros servicios. No compartiremos tu correo electrónico con terceros sin tu consentimiento explícito.
        </p>
        
        <h4 class="text-white font-semibold text-lg">2. Frecuencia de comunicaciones</h4>
        <p>
          Recibirás comunicaciones periódicas que pueden incluir boletines informativos, ofertas especiales y actualizaciones de productos o servicios. La frecuencia de estos correos electrónicos puede variar.
        </p>
        
        <h4 class="text-white font-semibold text-lg">3. Cancelación de suscripción</h4>
        <p>
          Puedes cancelar tu suscripción en cualquier momento utilizando el enlace de cancelación que se incluye en cada correo electrónico que recibas.
        </p>
        
        <h4 class="text-white font-semibold text-lg">4. Protección de datos</h4>
        <p>
          Tus datos personales serán tratados de acuerdo con nuestra política de privacidad y la legislación vigente sobre protección de datos.
        </p>
      </div>
    </div>

    <!-- Footer fijo con botón -->
    <div class="p-8 pt-4">
      <button
        id="closeTermsBtn"
        class="relative w-full bg-black border border-gray-700 rounded-xl py-4 px-6 text-white font-semibold transition-all duration-300 hover:border-red-600/50 group overflow-hidden"
      >
        <div class="absolute inset-0 bg-gradient-to-r from-red-900/0 via-red-800/0 to-red-900/0 group-hover:from-red-900/20 group-hover:via-red-800/30 group-hover:to-red-900/20 transition-all duration-500"></div>
        <span class="relative z-10">Cerrar</span>
      </button>
    </div>
  </div>
</div>

<script>
  declare global {
    interface Window {
      resetSubscription: () => void;
      checkSubscriptionStatus: () => void;
    }
  }

  function lockBodyScroll() {
    document.body.classList.add('overflow-hidden', 'fixed', 'inset-0');
    document.body.style.width = '100%';
    document.body.style.height = '100%';
  }

  function unlockBodyScroll() {
    document.body.classList.remove('overflow-hidden', 'fixed', 'inset-0');
    document.body.style.width = '';
    document.body.style.height = '';
  }

  // Función global para resetear la suscripción (disponible en consola)
  window.resetSubscription = function() {
    localStorage.removeItem('userSubscribed');
    localStorage.removeItem('modalLastClosed');
    console.log('✅ Suscripción reseteada. Recarga la página para ver el modal.');
  };

  window.checkSubscriptionStatus = function() {
    const hasSubscribed = localStorage.getItem('userSubscribed');
    const lastClosedTime = localStorage.getItem('modalLastClosed');
    const fourHours = 4 * 60 * 60 * 1000;

    // Si ya está suscrito, nunca mostrar el modal
    if (hasSubscribed === 'true') return;

    // Si cerró el modal hace menos de 4 horas, no mostrarlo
    if (lastClosedTime) {
      const timeDifference = Date.now() - parseInt(lastClosedTime);
      if (timeDifference < fourHours) return;
    }

    const modalElement = document.getElementById("subscriptionModal");
    if (modalElement) {
      modalElement.classList.add('active');
      modalElement.classList.remove('pointer-events-none');
      modalElement.classList.add('pointer-events-auto');
      modalElement.style.display = 'flex';
      
      lockBodyScroll();
    }
  }
    
  function closeModal() {
    const modal = document.getElementById("subscriptionModal");
    if (modal) {
      modal.classList.add('opacity-0');
      modal.classList.remove('pointer-events-auto');
      modal.classList.add('pointer-events-none');
      
      unlockBodyScroll();
      
      setTimeout(() => {
        if (modal) modal.style.display = 'none';
      }, 300);
    }

    if (!localStorage.getItem('userSubscribed')) {
      localStorage.setItem('modalLastClosed', Date.now().toString());
    }
  }
    
  function showSuccessMessage() {
    const modalContent = document.getElementById('modalContent');
    const successMessage = document.getElementById('successMessage');
    
    if (modalContent) modalContent.style.display = 'none';
    if (successMessage) successMessage.classList.remove('hidden');
    
    setTimeout(() => {
      closeModal();
    }, 4000);
  }

  function showError(elementId: string, message: string) {
    const errorElement = document.getElementById(elementId);
    const errorTextElement = document.getElementById(elementId + 'Text');
    
    if (errorElement) errorElement.classList.remove('hidden');
    if (errorTextElement) errorTextElement.textContent = message;
  }

  function hideErrors() {
    const emailError = document.getElementById('emailError');
    const termsError = document.getElementById('termsError');
    const generalError = document.getElementById('generalError');
    
    if (emailError) emailError.classList.add('hidden');
    if (termsError) termsError.classList.add('hidden');
    if (generalError) generalError.classList.add('hidden');
  }

  function showGeneralError(message: string) {
    const generalError = document.getElementById('generalError');
    const generalErrorText = document.getElementById('generalErrorText');
    
    if (generalError) generalError.classList.remove('hidden');
    if (generalErrorText) generalErrorText.textContent = message;
  }
    
  const closeButton = document.getElementById('closeModalBtn');
  if (closeButton) {
    closeButton.addEventListener('click', (e) => {
      e.preventDefault();
      console.log('🚫 Modal cerrado por el usuario (botón X)');
      closeModal();
    });
  }
    
  const modalElement2 = document.getElementById("subscriptionModal");
  if (modalElement2) {
    modalElement2.addEventListener('click', (e) => {
      if (e.target === modalElement2) {
        console.log('🚫 Modal cerrado por el usuario (clic fuera)');
        closeModal();
      }
    });
  }
    
  const form = document.getElementById('subscriptionForm');
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      hideErrors();
      
      const emailInput = document.getElementById('email') as HTMLInputElement | null;
      const termsInput = document.getElementById('terms') as HTMLInputElement | null;
      const subscribeBtn = document.getElementById('subscribeBtn') as HTMLButtonElement | null;
      const subscribeText = document.getElementById('subscribeText');
      
      const email = emailInput ? emailInput.value.trim() : '';
      const termsAccepted = termsInput ? termsInput.checked : false;
      
      if (!email) {
        showError('email', 'El email es obligatorio');
        return;
      }
      
      if (!termsAccepted) {
        showError('terms', 'Debes aceptar los términos y condiciones');
        return;
      }
      
      // Deshabilitar botón y mostrar loading
      if (subscribeBtn) subscribeBtn.disabled = true;
      if (subscribeText) subscribeText.textContent = 'Enviando...';
      
      try {
        const response = await fetch('/api/subscriptionEmail', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: email,
            termsAccepted: termsAccepted
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          console.log('✅ Usuario suscrito exitosamente');
          localStorage.setItem('userSubscribed', 'true');
          localStorage.removeItem('modalLastClosed');
          showSuccessMessage();
          
          window.dispatchEvent(new CustomEvent('subscriptionSuccess', { 
            detail: { totalEmails: result.totalEmails } 
          }));
        } else {
          console.error('❌ Error en la suscripción:', result.message);

          showGeneralError(result.message);
        }
      } catch (error) {
        console.error('❌ Error de conexión:', error);
        showGeneralError('Error de conexión. Inténtalo de nuevo.');
      } finally {

        if (subscribeBtn) subscribeBtn.disabled = false;
        if (subscribeText) subscribeText.textContent = 'Suscribirse';
      }
    });
  }

  const emailInput = document.getElementById('email');
  const inputGlow = document.getElementById('inputGlow');
  
  if (emailInput && inputGlow) {
    emailInput.addEventListener('focus', () => {
      inputGlow.style.opacity = '1';
    });
    
    emailInput.addEventListener('blur', () => {
      inputGlow.style.opacity = '0';
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    if (typeof window.checkSubscriptionStatus === 'function') {
      window.checkSubscriptionStatus();
    }
  });

// Manejo del modal de términos y condiciones
const termsText = document.getElementById('termsText');
const termsModal = document.getElementById('termsModal');
const termsModalContent = document.getElementById('termsModalContent');
const subscriptionModal = document.getElementById("subscriptionModal");
const closeTermsModalBtn = document.getElementById('closeTermsModalBtn');
const closeTermsBtn = document.getElementById('closeTermsBtn');

if (termsText) {
  termsText.addEventListener('click', (e) => {
    e.preventDefault();
    if (termsModal && subscriptionModal) {

      subscriptionModal.classList.add('opacity-0');
      subscriptionModal.classList.remove('pointer-events-auto');
      subscriptionModal.classList.add('pointer-events-none');
      
      termsModal.style.display = 'flex';
      setTimeout(() => {
        termsModal.classList.remove('opacity-0');
        termsModal.classList.remove('pointer-events-none');
        termsModal.classList.add('pointer-events-auto');
        termsModal.classList.add('opacity-1');
        
        if (termsModalContent) {
          termsModalContent.classList.add('scale-100');
          termsModalContent.classList.remove('scale-95');
        }
      }, 50);
    }
  });
}

function closeTermsModal() {
  if (termsModal && termsModalContent) {
    termsModalContent.classList.remove('scale-100');
    termsModalContent.classList.add('scale-95');
    
    termsModal.classList.add('opacity-0');
    termsModal.classList.remove('pointer-events-auto');
    termsModal.classList.add('pointer-events-none');
    
    setTimeout(() => {
      if (termsModal) termsModal.style.display = 'none';
    }, 500);
  }
}

function showSubscriptionModal() {
  if (subscriptionModal) {
    subscriptionModal.style.display = 'flex';
    setTimeout(() => {
      subscriptionModal.classList.remove('opacity-0');
      subscriptionModal.classList.add('active');
      subscriptionModal.classList.remove('pointer-events-none');
      subscriptionModal.classList.add('pointer-events-auto');
    }, 50);
  }
}

function closeTermsAndShowSubscription() {
  closeTermsModal();
  
  setTimeout(() => {
    showSubscriptionModal();
  }, 300);
}

if (closeTermsModalBtn) {
  closeTermsModalBtn.addEventListener('click', () => {
    closeTermsAndShowSubscription();
  });
}

if (closeTermsBtn) {
  closeTermsBtn.addEventListener('click', () => {
    closeTermsAndShowSubscription();
  });
}

if (termsModal) {
  termsModal.addEventListener('click', (e) => {
    if (e.target === termsModal) {
      closeTermsAndShowSubscription();
    }
  });
}
</script>



<style>
  #subscriptionModal {
    opacity: 0;
    visibility: hidden;
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  #subscriptionModal.active {
    opacity: 1;
    visibility: visible;
  }
  
  #subscriptionModal.active > div {
    transform: scale(1);
  }
  
  #successMessage {
    animation: successFadeIn 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes successFadeIn {
    0% {
      opacity: 0;
      transform: scale(0.8) translateY(20px);
    }
    50% {
      transform: scale(1.05) translateY(-5px);
    }
    100% {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }
  
  #subscribeBtn:hover {
    box-shadow: 0 0 20px rgba(185, 28, 28, 0.3);
  }
  
  .email-icon {
    animation: float 3s ease-in-out infinite;
  }
  
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-5px); }
  }
  
  #email {
    color: #000000 !important;
  }
  
  #email::placeholder {
    color: #6b7280;
  }
  
  #email:focus {
    color: #000000 !important;
  }

#termsModal {
  opacity: 0;
  visibility: hidden;
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

#termsModal.opacity-1 {
  opacity: 1;
  visibility: visible;
}

#termsModalContent {
  transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
}

#termsModal.opacity-1 #termsModalContent {
  transform: scale(1);
}

#termsText {
  text-decoration: underline;
  text-decoration-thickness: 1px;
  text-underline-offset: 2px;
  text-decoration-color: rgba(156, 163, 175, 0.5);
}

#termsText:hover {
  text-decoration-color: rgba(239, 68, 68, 0.7);
}

/* Estilo para bloquear el scroll del body */
body.overflow-hidden {
  overflow: hidden !important;
}

/* Ocultar scrollbar en todos los dispositivos */
.hide-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.hide-scrollbar::-webkit-scrollbar {
  display: none;
  width: 0;
  height: 0;
}

/* Animaciones para los modales */
@keyframes modalFadeIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes modalFadeOut {
  from {
    opacity: 1;
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0.95);
  }
}

.scale-100 {
  transform: scale(1);
}

.scale-95 {
  transform: scale(0.95);
}
</style>
