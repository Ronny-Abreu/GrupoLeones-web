---
// SubscriptionModal.astro
---

<div id="subscriptionModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-30 transition-opacity">
  <div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 overflow-hidden">
    <div class="relative p-6">
      <!-- Bot√≥n de cerrar -->
      <button id="closeModal" class="absolute top-4 right-4 text-gray-500 hover:text-gray-700">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      
      <!-- Contenido del modal -->
      <div id="modalContent" class="text-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-2">¬°Mantente informado!</h2>
        <p class="text-gray-600">Suscr√≠bete para recibir las √∫ltimas novedades, promociones y actualizaciones de Grupo Leones.</p>
      </div>
      
      <!-- Formulario de suscripci√≥n -->
      <form id="subscriptionForm" class="space-y-4">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Correo electr√≥nico</label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            required 
            placeholder="tucorreo@ejemplo.com" 
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
        </div>
        
        <button 
          type="submit" 
          class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors font-medium"
        >
          Suscribirme
        </button>
        
        <p class="text-xs text-gray-500 text-center">
          Al suscribirte, aceptas recibir correos electr√≥nicos de Grupo Leones. Puedes darte de baja en cualquier momento.
        </p>
      </form>
      
      <!-- Mensaje de √©xito -->
      <div id="successMessage" class="hidden text-center py-8">
        <div class="flex justify-center mb-4">
          <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
            <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
        </div>
        <h3 class="text-xl font-bold text-gray-800 mb-2">¬°Suscripci√≥n exitosa!</h3>
        <p class="text-gray-600">Gracias por suscribirte. Pronto recibir√°s nuestras novedades.</p>
      </div>
    </div>
  </div>
</div>

<script>
  // Agregar declaraci√≥n de tipos para propiedades personalizadas de window
  declare global {
    interface Window {
      resetSubscription: () => void;
      checkSubscriptionStatus: () => void;
    }
  }

  // Funci√≥n global para resetear la suscripci√≥n (disponible en consola)
  window.resetSubscription = function() {
    localStorage.removeItem('userSubscribed');
    localStorage.removeItem('modalLastClosed');
    console.log('‚úÖ Suscripci√≥n reseteada. Recarga la p√°gina para ver el modal.');
    console.log('üìä Estado actual:');
    console.log('- userSubscribed:', localStorage.getItem('userSubscribed'));
    console.log('- modalLastClosed:', localStorage.getItem('modalLastClosed'));
  };

  // Funci√≥n global para verificar el estado actual
  window.checkSubscriptionStatus = function() {
    const hasSubscribed = localStorage.getItem('userSubscribed');
    const lastClosedTime = localStorage.getItem('modalLastClosed');
    const fourHours = 4 * 60 * 60 * 1000;
    
    console.log('üìä Estado de suscripci√≥n:');
    console.log('- Usuario suscrito:', hasSubscribed === 'true' ? 'S√≠' : 'No');
    console.log('- √öltima vez cerrado:', lastClosedTime ? new Date(parseInt(lastClosedTime)).toLocaleString() : 'Nunca');
    
    if (lastClosedTime) {
      const timeDifference = Date.now() - parseInt(lastClosedTime);
      const hoursLeft = Math.max(0, (fourHours - timeDifference) / (1000 * 60 * 60));
      console.log('- Tiempo restante para mostrar modal:', hoursLeft.toFixed(2) + ' horas');
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('subscriptionModal');
    const closeButton = document.getElementById('closeModal');
    const form = document.getElementById('subscriptionForm');
    const modalContent = document.getElementById('modalContent');
    const subscriptionForm = document.getElementById('subscriptionForm');
    const successMessage = document.getElementById('successMessage');
    
    // FUNCIONALIDAD DE 4 HORAS - ACTIVA
    // Verificar si el usuario ya se suscribi√≥
    const hasSubscribed = localStorage.getItem('userSubscribed');
    const lastClosedTime = localStorage.getItem('modalLastClosed');
    const fourHours = 4 * 60 * 60 * 1000; // 4 horas en milisegundos
    
    console.log('üîç Verificando estado del modal...');
    console.log('- Usuario suscrito:', hasSubscribed);
    console.log('- √öltima vez cerrado:', lastClosedTime);
    
    // Si el usuario ya se suscribi√≥, no mostrar el modal
    if (hasSubscribed === 'true') {
      console.log('‚ùå Modal no se muestra: Usuario ya suscrito');
      if (modal) {
        if (modal) {
          if (modal) {
            if (modal) {
              if (modal) {
                modal.style.display = 'none';
              }
            }
          }
        }
      }
      return;
    }
    
    if (lastClosedTime) {
      const timeDifference = Date.now() - parseInt(lastClosedTime);
      console.log('‚è∞ Tiempo transcurrido:', (timeDifference / (1000 * 60 * 60)).toFixed(2) + ' horas');
      
      // Si no han pasado 4 horas, no mostrar el modal
      if (timeDifference < fourHours) {
        console.log('‚ùå Modal no se muestra: No han pasado 4 horas');
        modal.style.display = 'none';
        return;
      }
    }
    
    console.log('‚úÖ Mostrando modal de suscripci√≥n');

    if (modal) {
      modal.classList.add('active');
    }
    
    function closeModal() {
      if (modal) {
        modal.classList.add('opacity-0');
      }
      setTimeout(() => {
        if (modal) {
          modal.style.display = 'none';
        }
      }, 300);
      
      // Guardar el timestamp de cuando se cerr√≥ el modal (solo si no se suscribi√≥)
      if (!localStorage.getItem('userSubscribed')) {
        localStorage.setItem('modalLastClosed', Date.now().toString());
        console.log('üíæ Guardado timestamp de cierre:', new Date().toLocaleString());
      }
    }
    
    function showSuccessMessage() {
      if (modalContent) modalContent.style.display = 'none';
      if (subscriptionForm) subscriptionForm.style.display = 'none';
      if (successMessage) successMessage.classList.remove('hidden');
      
      setTimeout(() => {
        closeModal();
      }, 2000);
    }
    
    if (closeButton) {
      closeButton.addEventListener('click', (e) => {
        e.preventDefault();
        console.log('üö´ Modal cerrado por el usuario (bot√≥n X)');
        closeModal();
      });
    }
    
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          console.log('üö´ Modal cerrado por el usuario (clic fuera)');
          closeModal();
        }
      });
    }
    
    // Manejo env√≠o del formulario
    if (form) {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        const emailInput = document.getElementById('email') as HTMLInputElement | null;
        const email = emailInput ? emailInput.value : '';
        
        // Aqu√≠ agregar la l√≥gica para enviar el correo al backend
        console.log('üìß Email para suscripci√≥n:', email);
        
        // Marcar que el usuario se suscribi√≥ para no mostrar el modal de nuevo
        localStorage.setItem('userSubscribed', 'true');
        localStorage.removeItem('modalLastClosed');
        console.log('‚úÖ Usuario suscrito exitosamente');
        
        showSuccessMessage();
      });
    }
  });
</script>

<style>
  #subscriptionModal {
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  #subscriptionModal.active {
    opacity: 1;
    visibility: visible;
  }
  
  #successMessage {
    animation: fadeInScale 0.5s ease-out;
  }
  
  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>
